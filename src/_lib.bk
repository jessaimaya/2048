use log::info;
use log::Level;
use mogwai::prelude::*;
use std::panic;
use wasm_bindgen::prelude::*;
use web_sys::KeyboardEvent;

mod components;
mod containers;
mod router;

use crate::router::Route;

use components::grid::*;

use crate::AppModelIn::KeyUp;

// When the `wee_alloc` feature is enabled, use `wee_alloc` as the global
// allocator.
#[cfg(feature = "wee_alloc")]
#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;



#[derive(Debug)]
struct App {
    route: Route,
    pub grid: Vec<Grid>,
    pub last_move: Option<Move>,
    pub game_over: bool,
}

#[derive(Copy, Clone, Debug)]
pub enum Move {
    Up,
    Left,
    Down,
    Right,
}

#[derive(Clone)]
enum AppModelIn {
    KeyUp(Option<Event>),
    _Restart,
    _Undo,
}

#[derive(Clone)]
enum AppViewOut {
    Moved(Option<Move>, Grid),
}

impl Default for App {
    fn default() -> Self {
        let mut grid: Grid = Grid { data: [[0; 4]; 4] };
        grid.add_random_2();
        App {
            grid: vec![grid],
            last_move: None,
            game_over: false,
        }
    }
}

impl Component for App {
    type ModelMsg = AppModelIn;
    type ViewMsg = AppViewOut;
    type DomNode = HtmlElement;

    fn update(
        &mut self,
        msg: &AppModelIn,
        tx: &Transmitter<AppViewOut>,
        _sub: &Subscriber<AppModelIn>,
    ) {
        if !self.game_over {
        match msg {
            KeyUp(evt) => {
                let key = evt
                    .as_ref()
                    .expect("No KeyboardEvent")
                    .unchecked_ref::<KeyboardEvent>()
                    .key();
                let mut last: Grid = self.grid.last().expect("App's grid empty").clone();
                let mut is_direction = true;
                match key.as_ref() {
                    "ArrowUp" => {
                        self.last_move = Some(Move::Up);
                        last.move_up();
                    }
                    "ArrowDown" => {
                        self.last_move = Some(Move::Down);
                        last.move_down()
                    }
                    "ArrowLeft" => {
                        self.last_move = Some(Move::Left);
                        last.move_left();
                    }
                    "ArrowRight" => {
                        self.last_move = Some(Move::Right);
                        last.move_right();
                    }
                    _ => is_direction = false,
                }
                if is_direction {
                    // Just continue if a direction movement was pressed
                    let prev = *self.grid.last().expect("App's grid is empty");

                    if !prev.is_same(last) {
                        // Check if can move, if there's not any change, shouldn't update
                        last.add_random_2();
                        self.grid.push(last);
                        tx.send(&AppViewOut::Moved(self.last_move.clone(), last));
                    } else if last.is_full() {
                        self.game_over = true;
                        info!("GAME OVER");
                        info!("{:?}", last);
                    }

                }
            }
            Restart => (),
            Undo => (),
            _ => (),
        }
        }
    }

    fn view(
        &self,
        tx: &Transmitter<AppModelIn>,
        rx: &Receiver<AppViewOut>,
    ) -> ViewBuilder<HtmlElement> {
        info!("on view");
        builder!(
            <div
                class="App"
                tabindex="0"
                on:keyup=tx.contra_map(|ev: &Event| AppModelIn::KeyUp(Some(ev.clone())))
            >
            <main class="wrapper"
                patch:children=rx.branch_map(|AppViewOut::Moved(mov, grid)| {
                    Patch::Replace{value: grid.base_grid_view(), index: 1}.clone()
                })
            >
                {render_board()}
                {self.grid.last().expect("App grid empty").base_grid_view()}
            </main>
            </div>
        )
    }
}

#[wasm_bindgen(start)]
pub fn main() -> Result<(), JsValue> {
    panic::set_hook(Box::new(console_error_panic_hook::hook));
    console_log::init_with_level(Level::Trace).unwrap();

    let gizmo = Gizmo::from(App::default());
    let view = View::from(gizmo.view_builder());
    view.run()
}
